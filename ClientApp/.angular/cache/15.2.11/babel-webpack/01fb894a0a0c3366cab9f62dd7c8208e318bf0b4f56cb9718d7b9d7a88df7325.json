{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ValidationHelper } from '../Utility/validation-helper';\nimport { ContactDto } from '../Modal/ContactDto';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../Services/contact.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"ngx-bootstrap/modal\";\nconst _c0 = [\"contactModal\"];\nexport class CreateContactComponent {\n  constructor(contactService) {\n    this.contactService = contactService;\n    this.selectedContactId = 0;\n    this.saveClick = new EventEmitter();\n    this.closeClick = new EventEmitter();\n  }\n  ngOnInit() {\n    this.contactForm = new FormGroup({\n      email: new FormControl(),\n      firstName: new FormControl(),\n      lastName: new FormControl()\n    });\n  }\n  ngOnChanges() {\n    if (this.selectedContactId > 0) {\n      this.contactService.getContactsById(this.selectedContactId).subscribe(x => {\n        this.contactForm.patchValue({\n          email: x.email,\n          firstName: x.firstName,\n          lastName: x.lastName\n        });\n      });\n      this.contactModal.show();\n    } else {\n      this.contactModal.show();\n    }\n  }\n  openModal() {\n    this.contactModal.show();\n  }\n  closeModal() {\n    this.contactModal.hide();\n    this.closeClick.emit(true);\n  }\n  saveContactForm() {\n    if (this.contactForm.invalid) {\n      ValidationHelper.validateAllFormFields(this.contactForm);\n      return;\n    } else {\n      let contactDto = new ContactDto();\n      contactDto = Object.assign({}, this.contactForm.value);\n      if (this.selectedContactId > 0) contactDto.contactId = this.selectedContactId;else contactDto.contactId = 0;\n    }\n  }\n  createContact(data) {\n    this.contactService.createContact(data).subscribe(x => {\n      this.saveClick.emit(true);\n    });\n  }\n  updateContact(data) {\n    this.contactService.createContact(data).subscribe(x => {\n      this.saveClick.emit(true);\n    });\n  }\n  static #_ = this.ɵfac = function CreateContactComponent_Factory(t) {\n    return new (t || CreateContactComponent)(i0.ɵɵdirectiveInject(i1.ContactService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateContactComponent,\n    selectors: [[\"app-create-contact\"]],\n    viewQuery: function CreateContactComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contactModal = _t.first);\n      }\n    },\n    inputs: {\n      selectedContactId: \"selectedContactId\"\n    },\n    outputs: {\n      saveClick: \"saveClick\",\n      closeClick: \"closeClick\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 29,\n    vars: 1,\n    consts: [[\"bsModal\", \"\", \"id\", \"contactModal\", \"tabindex\", \"-1\", \"role\", \"dialog\", \"aria-labelledby\", \"contactModal\", \"aria-hidden\", \"true\", 1, \"modal\"], [\"contactModal\", \"bs-modal\"], [1, \"modal-dialog\", \"modal-md\"], [1, \"modal-content\"], [1, \"modal-header\"], [1, \"modal-title\"], [\"type\", \"button\", \"data-dismiss\", \"modal\", \"aria-label\", \"Close\", 1, \"close\", 3, \"click\"], [\"aria-hidden\", \"true\"], [1, \"modal-body\"], [3, \"formGroup\"], [1, \"form-group\"], [\"for\", \"email\"], [\"type\", \"email\", \"id\", \"emailId\", \"placeholder\", \"Enter email\", \"formControlName\", \"email\", 1, \"form-control\"], [\"for\", \"firstName\"], [\"type\", \"text\", \"id\", \"firstNameId\", \"placeholder\", \"Enter First Name\", \"formControlName\", \"firstName\", 1, \"form-control\"], [\"for\", \"lastName\"], [\"type\", \"text\", \"id\", \"lastNameId\", \"placeholder\", \"Enter Last Name\", \"formControlName\", \"lastName\", 1, \"form-control\"], [1, \"modal-footer\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", \"btn-sm\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", \"btn-sm\", 3, \"click\"]],\n    template: function CreateContactComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0, 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"h5\", 5);\n        i0.ɵɵtext(6, \"Create Modal\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"button\", 6);\n        i0.ɵɵlistener(\"click\", function CreateContactComponent_Template_button_click_7_listener() {\n          return ctx.closeModal();\n        });\n        i0.ɵɵelementStart(8, \"span\", 7);\n        i0.ɵɵtext(9, \"\\u00D7\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(10, \"div\", 8)(11, \"form\", 9)(12, \"div\", 10)(13, \"label\", 11);\n        i0.ɵɵtext(14, \"Email address\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(15, \"input\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"div\", 10)(17, \"label\", 13);\n        i0.ɵɵtext(18, \"First Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(19, \"input\", 14);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"div\", 10)(21, \"label\", 15);\n        i0.ɵɵtext(22, \"Last Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(23, \"input\", 16);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(24, \"div\", 17)(25, \"button\", 18);\n        i0.ɵɵlistener(\"click\", function CreateContactComponent_Template_button_click_25_listener() {\n          return ctx.saveContactForm();\n        });\n        i0.ɵɵtext(26, \" Save \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"button\", 19);\n        i0.ɵɵlistener(\"click\", function CreateContactComponent_Template_button_click_27_listener() {\n          return ctx.closeModal();\n        });\n        i0.ɵɵtext(28, \" Close \");\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"formGroup\", ctx.contactForm);\n      }\n    },\n    dependencies: [i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName, i3.ModalDirective],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["EventEmitter","FormControl","FormGroup","ValidationHelper","ContactDto","CreateContactComponent","constructor","contactService","ngOnInit","contactForm","email","firstName","lastName","ngOnChanges","selectedContactId","getContactsById","subscribe","x","patchValue","contactModal","show","openModal","closeModal","hide","closeClick","emit","saveContactForm","invalid","validateAllFormFields","contactDto","Object","assign","value","contactId","createContact","data","saveClick","updateContact","selectors","viewQuery","i0","ctx"],"sourceRoot":"","sources":["D:\\Project\\CMA\\ClientApp\\src\\app\\create-contact\\create-contact.component.ts","D:\\Project\\CMA\\ClientApp\\src\\app\\create-contact\\create-contact.component.html"],"sourcesContent":["import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { ContactService } from '../Services/contact.service';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { ModalDirective } from 'ngx-bootstrap/modal';\r\nimport { ValidationHelper } from '../Utility/validation-helper';\r\nimport { ContactDto } from '../Modal/ContactDto';\r\n\n@Component({\n  selector: 'app-create-contact',\n  templateUrl: './create-contact.component.html',\n  styleUrls: ['./create-contact.component.css']\n})\nexport class CreateContactComponent {\n  @Input() selectedContactId: number = 0;\n  contactForm!: FormGroup;\n  @Output() saveClick = new EventEmitter();\r\n  @Output() closeClick = new EventEmitter();\n  @ViewChild('contactModal', { static: true }) contactModal!: ModalDirective;\n  constructor(\n    private readonly contactService: ContactService) {\n\n  }\n  ngOnInit() {\n    this.contactForm = new FormGroup({\n      email: new FormControl(),\n      firstName: new FormControl(),\n      lastName: new FormControl(),\n\n    });\n  }\n  ngOnChanges() {\n    if (this.selectedContactId > 0) {\r\n      this.contactService.getContactsById(this.selectedContactId).subscribe(x => {\r\n        this.contactForm.patchValue({\r\n          email: x.email,\r\n          firstName: x.firstName,\r\n          lastName: x.lastName\r\n        })\r\n      })\r\n\r\n      this.contactModal.show();\r\n    }\r\n    else {\r\n      this.contactModal.show();\r\n    }\r\n  }\n  openModal() {\n    this.contactModal.show();\n  }\n\n  closeModal() {\n    this.contactModal.hide();\n    this.closeClick.emit(true);\n  }\n\n\n  saveContactForm() {\n    if (this.contactForm.invalid) {\n      ValidationHelper.validateAllFormFields(this.contactForm);\n      return;\n    }\n    else {\n      let contactDto: ContactDto = new ContactDto();\n      contactDto = Object.assign({}, this.contactForm.value);\n      if (this.selectedContactId > 0)\n        contactDto.contactId = this.selectedContactId;\n      else\n        contactDto.contactId = 0;\n    \n    }\n  }\n  createContact(data: ContactDto) {\n    this.contactService.createContact(data).subscribe(x => {\n      this.saveClick.emit(true);\n    })\r\n  }\n\n  updateContact(data: ContactDto) {\n    this.contactService.createContact(data).subscribe(x => {\n      this.saveClick.emit(true);\n    })\r\n  }\n}\n","\r\n<div bsModal #contactModal=\"bs-modal\" class=\"modal\" id=\"contactModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"contactModal\" aria-hidden=\"true\">\r\n  <div class=\"modal-dialog modal-md\">\r\n    <div class=\"modal-content\">\r\n      <div class=\"modal-header\">\r\n        <h5 class=\"modal-title\">Create Modal</h5>\r\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" (click)=\"closeModal()\">\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n      </div>\r\n\r\n      <div class=\"modal-body\">\r\n\r\n        <form [formGroup]=\"contactForm\">\r\n          <div class=\"form-group\">\r\n            <label for=\"email\">Email address</label>\r\n            <input type=\"email\"\r\n                   class=\"form-control\"\r\n                   id=\"emailId\"\r\n                   placeholder=\"Enter email\"\r\n                   formControlName=\"email\">\r\n\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"firstName\">First Name</label>\r\n            <input type=\"text\"\r\n                   class=\"form-control\"\r\n                   id=\"firstNameId\"\r\n                   placeholder=\"Enter First Name\"\r\n                   formControlName=\"firstName\">\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"lastName\">Last Name</label>\r\n            <input type=\"text\"\r\n                   class=\"form-control\"\r\n                   id=\"lastNameId\"\r\n                   placeholder=\"Enter Last Name\"\r\n                   formControlName=\"lastName\">\r\n          </div>\r\n\r\n        </form>\r\n\r\n      </div>\r\n      <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-primary btn-sm\" (click)=\"saveContactForm()\">\r\n          Save\r\n        </button>\r\n        <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"closeModal()\">\r\n          Close\r\n        </button>\r\n\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}