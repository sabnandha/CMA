{"ast":null,"code":"import { catchError, map, throwError as observableThrowError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ContactService {\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.baseUrl = baseUrl;\n  }\n  createContact(model) {\n    let createContactURL = this.baseUrl + \"weatherforecast/AddContact/\";\n    return this.http.post(createContactURL, JSON.stringify(model)).pipe(map(res => {\n      return res;\n    }), catchError(result => {\n      return this.handleError(result);\n    }));\n  }\n  handleError(result) {\n    if (result.status === 400 || result.status === 404) {\n      console.log(\"in 400\");\n      console.log(result);\n      return observableThrowError(result);\n    }\n    if (result.status === 500) {\n      console.log(\"in 500\");\n      console.log(result);\n      return observableThrowError(result);\n    }\n    if (result.status === 403) {\n      console.log(\"in 403\");\n      console.log(result);\n    }\n    if (result.status !== 401) {}\n    if (result.headers === undefined) {\n      return observableThrowError(result);\n    }\n    const applicationError = result.headers.get('Application-Error');\n    return observableThrowError(applicationError || 'Server error');\n  }\n  static #_ = this.ɵfac = function ContactService_Factory(t) {\n    return new (t || ContactService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ContactService,\n    factory: ContactService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,UAAU,EAAEC,GAAG,EAAEC,UAAU,IAAIC,oBAAoB,QAAQ,MAAM;;;AAK1E,OAAM,MAAOC,cAAc;EACzBC,YAAmBC,IAAgB,EAA6BC,OAAe;IAA5D,SAAI,GAAJD,IAAI;IAAyC,YAAO,GAAPC,OAAO;EAEvE;EAEAC,aAAa,CAACC,KAAU;IACtB,IAAIC,gBAAgB,GAAG,IAAI,CAACH,OAAO,GAAE,6BAA6B;IAClE,OAAO,IAAI,CAACD,IAAI,CAACK,IAAI,CAACD,gBAAgB,EAAEE,IAAI,CAACC,SAAS,CAACJ,KAAK,CAAC,CAAC,CAC3DK,IAAI,CACHb,GAAG,CAAEc,GAAG,IAAI;MAEV,OAAOA,GAAG;IACZ,CAAC,CAAC,EACFf,UAAU,CAACgB,MAAM,IAAG;MAClB,OAAO,IAAI,CAACC,WAAW,CAACD,MAAM,CAAC;IACjC,CAAC,CAAC,CACH;EACL;EAEQC,WAAW,CAACD,MAAW;IAE7B,IAAIA,MAAM,CAACE,MAAM,KAAK,GAAG,IAAIF,MAAM,CAACE,MAAM,KAAK,GAAG,EAAE;MAClDC,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;MACrBD,OAAO,CAACC,GAAG,CAACJ,MAAM,CAAC;MAEnB,OAAOb,oBAAoB,CAACa,MAAM,CAAC;;IAErC,IAAIA,MAAM,CAACE,MAAM,KAAK,GAAG,EAAE;MACzBC,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;MACrBD,OAAO,CAACC,GAAG,CAACJ,MAAM,CAAC;MAEnB,OAAOb,oBAAoB,CAACa,MAAM,CAAC;;IAErC,IAAIA,MAAM,CAACE,MAAM,KAAK,GAAG,EAAE;MAEzBC,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;MACrBD,OAAO,CAACC,GAAG,CAACJ,MAAM,CAAC;;IAGtB,IAAIA,MAAM,CAACE,MAAM,KAAK,GAAG,EAAE;IAK1B,IAAIF,MAAM,CAACK,OAAO,KAAKC,SAAS,EAAE;MAChC,OAAOnB,oBAAoB,CAACa,MAAM,CAAC;;IAGrC,MAAMO,gBAAgB,GAAGP,MAAM,CAACK,OAAO,CAACG,GAAG,CAAC,mBAAmB,CAAC;IAChE,OAAOrB,oBAAoB,CAACoB,gBAAgB,IAAI,cAAc,CAAC;EACjE;EAAC;qBAlDUnB,cAAc,0CACoB,UAAU;EAAA;EAAA;WAD5CA,cAAc;IAAAqB,SAAdrB,cAAc;IAAAsB,YAFb;EAAM","names":["catchError","map","throwError","observableThrowError","ContactService","constructor","http","baseUrl","createContact","model","createContactURL","post","JSON","stringify","pipe","res","result","handleError","status","console","log","headers","undefined","applicationError","get","factory","providedIn"],"sourceRoot":"","sources":["D:\\Project\\CMA\\ClientApp\\src\\app\\Services\\contact.service.ts"],"sourcesContent":["import { HttpClient } from \"@angular/common/http\";\r\nimport { Inject, Injectable } from \"@angular/core\";\r\nimport { catchError, map, throwError as observableThrowError } from \"rxjs\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ContactService {\r\n  constructor(public http: HttpClient, @Inject('BASE_URL') public baseUrl: string) {\r\n   \r\n  }\r\n\r\n  createContact(model: any) {\r\n    let createContactURL = this.baseUrl +\"weatherforecast/AddContact/\"\r\n    return this.http.post(createContactURL, JSON.stringify(model))\r\n      .pipe(\r\n        map((res) => {\r\n          \r\n          return res;\r\n        }),\r\n        catchError(result => {\r\n          return this.handleError(result);\r\n        })\r\n      );\r\n  }\r\n  \r\n  private handleError(result: any) {\r\n\r\n    if (result.status === 400 || result.status === 404) {\r\n      console.log(\"in 400\")\r\n      console.log(result);\r\n         \r\n      return observableThrowError(result);\r\n    }\r\n    if (result.status === 500) {\r\n      console.log(\"in 500\")\r\n      console.log(result);\r\n    \r\n      return observableThrowError(result);\r\n    }\r\n    if (result.status === 403) {\r\n\r\n      console.log(\"in 403\")\r\n      console.log(result);\r\n    }\r\n   \r\n   if (result.status !== 401) {\r\n      \r\n    }\r\n\r\n\r\n    if (result.headers === undefined) {\r\n      return observableThrowError(result);\r\n    }\r\n\r\n    const applicationError = result.headers.get('Application-Error');\r\n    return observableThrowError(applicationError || 'Server error');\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}