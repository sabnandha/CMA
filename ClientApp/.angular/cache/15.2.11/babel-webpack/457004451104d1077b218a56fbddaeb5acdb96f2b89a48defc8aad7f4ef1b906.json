{"ast":null,"code":"import { UntypedFormControl, UntypedFormGroup } from '@angular/forms';\nexport class ValidationHelper {\n  static zeroValueValidator(control) {\n    const zeroValue = control.value === null || control.value === undefined || control.value === '0' || control.value === 0 || (control.value.toString() || '').trim().length === 0;\n    return !zeroValue ? null : {\n      zeroValue: true\n    };\n  }\n  static createFormArray(dataList, formBuilder) {\n    if (dataList != null) {\n      const formGroupList = dataList.map(item => formBuilder.group(item));\n      return formBuilder.array(formGroupList);\n    } else {\n      return formBuilder.array([]);\n    }\n  }\n  static validateAllFormFields(formGroup) {\n    Object.keys(formGroup.controls).forEach(field => {\n      const control = formGroup.get(field);\n      if (control instanceof UntypedFormControl) {\n        control.markAsTouched({\n          onlySelf: true\n        });\n      } else if (control instanceof UntypedFormGroup) {\n        this.validateAllFormFields(control);\n      }\n    });\n  }\n  static applyTabHighLight(tabName, isValid) {\n    let tabLink = document.getElementById(tabName + '-link');\n    let tabBody = document.getElementById(tabName);\n    let tabChildBody = document.getElementById(tabName + '-Child');\n    if (tabBody != null) {\n      isValid ? tabBody.classList.remove(\"errorTab\") : tabBody.classList.add(\"errorTab\");\n    }\n    if (tabChildBody != null) {\n      isValid ? tabChildBody.classList.remove(\"errorTab\") : tabChildBody.classList.add(\"errorTab\");\n    }\n    if (tabLink != null) {\n      isValid ? tabLink.classList.remove(\"errorTab\") : tabLink.classList.add(\"errorTab\");\n    }\n  }\n  static getFormValueByFormControl(formControl, controlName) {\n    return formControl.get([controlName]).value;\n  }\n  static setFormControlError(formControl, controlName) {\n    formControl.get([controlName]).setErrors({\n      'required': true\n    });\n    formControl.get([controlName]).markAllAsTouched();\n  }\n  static clearFormControlError(formControl, controlName) {\n    formControl.get([controlName]).setErrors(null);\n  }\n  constructor() {}\n}","map":{"version":3,"mappings":"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","names":["UntypedFormControl","UntypedFormGroup","ValidationHelper","zeroValueValidator","control","zeroValue","value","undefined","toString","trim","length","createFormArray","dataList","formBuilder","formGroupList","map","item","group","array","validateAllFormFields","formGroup","Object","keys","controls","forEach","field","get","markAsTouched","onlySelf","applyTabHighLight","tabName","isValid","tabLink","document","getElementById","tabBody","tabChildBody","classList","remove","add","getFormValueByFormControl","formControl","controlName","setFormControlError","setErrors","markAllAsTouched","clearFormControlError","constructor"],"sourceRoot":"","sources":["D:\\Project\\CMA\\ClientApp\\src\\app\\Utility\\validation-helper.ts"],"sourcesContent":["import {\r\n    UntypedFormBuilder,\r\n    UntypedFormControl,\r\n    UntypedFormGroup\r\n} from '@angular/forms'; \r\nexport class ValidationHelper {\r\n   \r\n\r\n  static zeroValueValidator(control: UntypedFormControl) {\r\n    const zeroValue =\r\n      control.value === null ||\r\n      control.value === undefined ||\r\n      control.value === '0' ||\r\n      control.value === 0 ||\r\n      (control.value.toString() || '').trim().length === 0;\r\n    return !zeroValue ? null : { zeroValue: true };\r\n  }\r\n\r\n  static createFormArray(dataList: any[], formBuilder: UntypedFormBuilder) {\r\n    if (dataList != null) {\r\n      const formGroupList = dataList.map(item => formBuilder.group(item));\r\n      return formBuilder.array(formGroupList);\r\n    } else {\r\n      return formBuilder.array([]);\r\n    }\r\n  }\r\n\r\n  static validateAllFormFields(formGroup: UntypedFormGroup) {\r\n    Object.keys(formGroup.controls).forEach(field => {\r\n      const control = formGroup.get(field);\r\n      if (control instanceof UntypedFormControl) { \r\n        control.markAsTouched({ onlySelf: true });\r\n      } else if (control instanceof UntypedFormGroup) {\r\n        this.validateAllFormFields(control);\r\n      }\r\n    });\r\n  }\r\n\r\n  static applyTabHighLight(tabName: string, isValid: boolean) {\r\n    let tabLink = document.getElementById(tabName + '-link');\r\n    let tabBody = document.getElementById(tabName);\r\n    let tabChildBody = document.getElementById(tabName + '-Child');\r\n    if (tabBody != null) {\r\n      isValid ? tabBody.classList.remove(\"errorTab\") : tabBody.classList.add(\"errorTab\");\r\n    }\r\n    if (tabChildBody != null) {\r\n      isValid ? tabChildBody.classList.remove(\"errorTab\") : tabChildBody.classList.add(\"errorTab\");\r\n    }\r\n    if (tabLink != null) {\r\n      isValid ? tabLink.classList.remove(\"errorTab\") : tabLink.classList.add(\"errorTab\");\r\n    }\r\n  }\r\n\r\n  static getFormValueByFormControl(formControl: any, controlName: string) {\r\n    return formControl.get([controlName]).value;\r\n  }\r\n  static setFormControlError(formControl: any, controlName: string) {\r\n    formControl.get([controlName]).setErrors({ 'required': true });\r\n    formControl.get([controlName]).markAllAsTouched();\r\n  }\r\n  static clearFormControlError(formControl: any, controlName: string) {\r\n    formControl.get([controlName]).setErrors(null);\r\n  }\r\n\r\n  private constructor() { }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}