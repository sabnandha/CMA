{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ValidationHelper } from '../Utility/validation-helper';\nimport { ContactDto } from '../Modal/ContactDto';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../Services/contact.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"ngx-bootstrap/modal\";\nconst _c0 = [\"contactModal\"];\nexport class CreateContactComponent {\n  constructor(contactService) {\n    this.contactService = contactService;\n    this.selectedContactId = 0;\n    this.saveClick = new EventEmitter();\n    this.closeClick = new EventEmitter();\n    this.contactForm = new FormGroup({\n      email: new FormControl(Validators.required),\n      firstName: new FormControl(Validators.required),\n      lastName: new FormControl(Validators.required)\n    });\n  }\n  ngOnInit() {}\n  ngOnChanges(changes) {\n    // If selectedContactId changes, update the form and show the modal\n    if (changes['selectedContactId'] && this.contactModal) {\n      if (this.selectedContactId > 0) {\n        // Load the contact for editing\n        this.contactService.getContactsById(this.selectedContactId).subscribe(contact => {\n          this.contactForm.patchValue({\n            email: contact.email,\n            firstName: contact.firstName,\n            lastName: contact.lastName\n          });\n          // Show the modal once the data is loaded\n          this.contactModal.show();\n        });\n      } else {\n        // Reset the form for a new contact and show the modal\n        this.contactForm.reset();\n        this.contactModal.show();\n      }\n    }\n  }\n  ngAfterViewInit() {\n    // Only show the modal initially if it's a new contact creation\n    if (this.selectedContactId === 0 && this.contactModal) {\n      this.contactModal.show();\n    }\n  }\n  openModal() {\n    this.contactModal.show();\n  }\n  closeModal() {\n    this.selectedContactId = 0;\n    this.contactModal.hide();\n    this.closeClick.emit(true);\n  }\n  saveContactForm() {\n    if (this.contactForm.invalid) {\n      ValidationHelper.validateAllFormFields(this.contactForm);\n      return;\n    } else {\n      let contactDto = new ContactDto();\n      contactDto = Object.assign({}, this.contactForm.value);\n      if (this.selectedContactId > 0) contactDto.contactId = this.selectedContactId;else contactDto.contactId = 0;\n    }\n  }\n  createContact(data) {\n    this.contactService.createContact(data).subscribe(x => {\n      this.saveClick.emit(true);\n    });\n  }\n  updateContact(data) {\n    this.contactService.createContact(data).subscribe(x => {\n      this.saveClick.emit(true);\n    });\n  }\n  static #_ = this.ɵfac = function CreateContactComponent_Factory(t) {\n    return new (t || CreateContactComponent)(i0.ɵɵdirectiveInject(i1.ContactService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateContactComponent,\n    selectors: [[\"app-create-contact\"]],\n    viewQuery: function CreateContactComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contactModal = _t.first);\n      }\n    },\n    inputs: {\n      selectedContactId: \"selectedContactId\"\n    },\n    outputs: {\n      saveClick: \"saveClick\",\n      closeClick: \"closeClick\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 32,\n    vars: 1,\n    consts: [[\"bsModal\", \"\", \"id\", \"contactModal\", \"tabindex\", \"-1\", \"role\", \"dialog\", \"aria-labelledby\", \"contactModal\", \"aria-hidden\", \"true\", 1, \"modal\"], [\"contactModal\", \"bs-modal\"], [1, \"modal-dialog\", \"modal-lg\"], [1, \"modal-content\"], [1, \"modal-header\"], [1, \"modal-title\"], [1, \"modal-body\"], [3, \"formGroup\"], [1, \"form-group\"], [\"for\", \"email\"], [2, \"color\", \"red\"], [\"type\", \"email\", \"id\", \"emailId\", \"placeholder\", \"Enter email\", \"formControlName\", \"email\", 1, \"form-control\"], [\"for\", \"firstName\"], [\"type\", \"text\", \"id\", \"firstNameId\", \"placeholder\", \"Enter First Name\", \"formControlName\", \"firstName\", 1, \"form-control\"], [\"for\", \"lastName\"], [\"type\", \"text\", \"id\", \"lastNameId\", \"placeholder\", \"Enter Last Name\", \"formControlName\", \"lastName\", 1, \"form-control\"], [1, \"modal-footer\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", \"btn-sm\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", \"btn-sm\", 3, \"click\"]],\n    template: function CreateContactComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0, 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"h4\", 5);\n        i0.ɵɵtext(6, \"Modal Header\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"div\", 6)(8, \"form\", 7)(9, \"div\", 8)(10, \"label\", 9);\n        i0.ɵɵtext(11, \"Email address \");\n        i0.ɵɵelementStart(12, \"span\", 10);\n        i0.ɵɵtext(13, \"*\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(14, \"input\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\", 8)(16, \"label\", 12);\n        i0.ɵɵtext(17, \"First Name \");\n        i0.ɵɵelementStart(18, \"span\", 10);\n        i0.ɵɵtext(19, \"*\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(20, \"input\", 13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"div\", 8)(22, \"label\", 14);\n        i0.ɵɵtext(23, \"Last Name \");\n        i0.ɵɵelementStart(24, \"span\", 10);\n        i0.ɵɵtext(25, \"*\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(26, \"input\", 15);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(27, \"div\", 16)(28, \"button\", 17);\n        i0.ɵɵlistener(\"click\", function CreateContactComponent_Template_button_click_28_listener() {\n          return ctx.saveContactForm();\n        });\n        i0.ɵɵtext(29, \" Save \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(30, \"button\", 18);\n        i0.ɵɵlistener(\"click\", function CreateContactComponent_Template_button_click_30_listener() {\n          return ctx.closeModal();\n        });\n        i0.ɵɵtext(31, \" Close \");\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"formGroup\", ctx.contactForm);\n      }\n    },\n    dependencies: [i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName, i3.ModalDirective],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["EventEmitter","FormControl","FormGroup","Validators","ValidationHelper","ContactDto","CreateContactComponent","constructor","contactService","contactForm","email","required","firstName","lastName","ngOnInit","ngOnChanges","changes","contactModal","selectedContactId","getContactsById","subscribe","contact","patchValue","show","reset","ngAfterViewInit","openModal","closeModal","hide","closeClick","emit","saveContactForm","invalid","validateAllFormFields","contactDto","Object","assign","value","contactId","createContact","data","x","saveClick","updateContact","selectors","viewQuery","i0","ctx"],"sourceRoot":"","sources":["D:\\Project\\CMA\\ClientApp\\src\\app\\create-contact\\create-contact.component.ts","D:\\Project\\CMA\\ClientApp\\src\\app\\create-contact\\create-contact.component.html"],"sourcesContent":["import { AfterViewInit, Component, EventEmitter, Input, OnInit, Output, SimpleChanges, ViewChild } from '@angular/core';\nimport { ContactService } from '../Services/contact.service';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ModalDirective } from 'ngx-bootstrap/modal';\r\nimport { ValidationHelper } from '../Utility/validation-helper';\r\nimport { ContactDto } from '../Modal/ContactDto';\r\n\n@Component({\n  selector: 'app-create-contact',\n  templateUrl: './create-contact.component.html',\n  styleUrls: ['./create-contact.component.css']\n})\nexport class CreateContactComponent implements OnInit, AfterViewInit {\n  @Input() selectedContactId: number = 0;\n  contactForm!: FormGroup;\n  @Output() saveClick = new EventEmitter();\r\n  @Output() closeClick = new EventEmitter();\n  @ViewChild('contactModal', { static: true }) contactModal!: ModalDirective;\n  constructor(\n    private readonly contactService: ContactService) {\n    this.contactForm = new FormGroup({\n      email: new FormControl(Validators.required),\n      firstName: new FormControl(Validators.required),\n      lastName: new FormControl(Validators.required),\n\n    });\n  }\n  ngOnInit() {\n   \n  }\n  ngOnChanges(changes: SimpleChanges) {\n\n    // If selectedContactId changes, update the form and show the modal\n    if (changes['selectedContactId'] && this.contactModal) {\n      if (this.selectedContactId > 0) {\n        // Load the contact for editing\n        this.contactService.getContactsById(this.selectedContactId).subscribe(contact => {\n          this.contactForm.patchValue({\n            email: contact.email,\n            firstName: contact.firstName,\n            lastName: contact.lastName,\n          });\n          // Show the modal once the data is loaded\n          this.contactModal.show();\n        });\n      } else {\n        // Reset the form for a new contact and show the modal\n        this.contactForm.reset();\n        this.contactModal.show();\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    // Only show the modal initially if it's a new contact creation\n    if (this.selectedContactId === 0 && this.contactModal) {\n      this.contactModal.show();\n    }\n  }\n  openModal() {\n    this.contactModal.show();\n  }\n\n  closeModal() {\n    this.selectedContactId = 0;\n    this.contactModal.hide();\n    this.closeClick.emit(true);\n  }\n\n\n  saveContactForm() {\n    if (this.contactForm.invalid) {\n      ValidationHelper.validateAllFormFields(this.contactForm);\n      return;\n    }\n    else {\n      let contactDto: ContactDto = new ContactDto();\n      contactDto = Object.assign({}, this.contactForm.value);\n      if (this.selectedContactId > 0)\n        contactDto.contactId = this.selectedContactId;\n      else\n        contactDto.contactId = 0;\n    \n    }\n  }\n  createContact(data: ContactDto) {\n    this.contactService.createContact(data).subscribe(x => {\n      this.saveClick.emit(true);\n    })\r\n  }\n\n  updateContact(data: ContactDto) {\n    this.contactService.createContact(data).subscribe(x => {\n      this.saveClick.emit(true);\n    })\r\n  }\n}\n","\r\n<div bsModal #contactModal=\"bs-modal\" class=\"modal\" id=\"contactModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"contactModal\" aria-hidden=\"true\">\r\n  <div class=\"modal-dialog modal-lg\">\r\n    <div class=\"modal-content\">\r\n       \r\n      <div class=\"modal-header\">\r\n        <!--<button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeModal()\">&times;</button>-->\r\n        <h4 class=\"modal-title\">Modal Header</h4>\r\n      </div>\r\n\r\n      <div class=\"modal-body\">\r\n\r\n        <form [formGroup]=\"contactForm\">\r\n          <div class=\"form-group\">\r\n            <label for=\"email\">Email address <span style=\"color:red\">*</span></label>\r\n            <input type=\"email\"\r\n                   class=\"form-control\"\r\n                   id=\"emailId\"\r\n                   placeholder=\"Enter email\"\r\n                   formControlName=\"email\">\r\n\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"firstName\">First Name <span style=\"color:red\">*</span> </label>\r\n            <input type=\"text\"\r\n                   class=\"form-control\"\r\n                   id=\"firstNameId\"\r\n                   placeholder=\"Enter First Name\"\r\n                   formControlName=\"firstName\">\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"lastName\">Last Name <span style=\"color:red\">*</span> </label>\r\n            <input type=\"text\"\r\n                   class=\"form-control\"\r\n                   id=\"lastNameId\"\r\n                   placeholder=\"Enter Last Name\"\r\n                   formControlName=\"lastName\">\r\n          </div>\r\n\r\n        </form>\r\n\r\n      </div>\r\n      <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-primary btn-sm\" (click)=\"saveContactForm()\">\r\n          Save\r\n        </button>\r\n        <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"closeModal()\">\r\n          Close\r\n        </button>\r\n\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}