{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { ValidationHelper } from '../Utility/validation-helper';\nimport { ContactDto } from '../Modal/ContactDto';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../Services/contact.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"ngx-bootstrap/modal\";\nconst _c0 = [\"contactModal\"];\nfunction CreateContactComponent_div_15_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \"Email is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateContactComponent_div_15_small_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \"Please enter a valid email address.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateContactComponent_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 20);\n    i0.ɵɵtemplate(1, CreateContactComponent_div_15_small_1_Template, 2, 0, \"small\", 21);\n    i0.ɵɵtemplate(2, CreateContactComponent_div_15_small_2_Template, 2, 0, \"small\", 21);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.contactForm.controls[\"email\"].hasError(\"required\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.contactForm.controls[\"email\"].hasError(\"pattern\"));\n  }\n}\nfunction CreateContactComponent_div_22_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \"First Name is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateContactComponent_div_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 20);\n    i0.ɵɵtemplate(1, CreateContactComponent_div_22_small_1_Template, 2, 0, \"small\", 21);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.contactForm.controls[\"firstName\"].hasError(\"required\"));\n  }\n}\nfunction CreateContactComponent_div_29_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \"Last Name is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateContactComponent_div_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 20);\n    i0.ɵɵtemplate(1, CreateContactComponent_div_29_small_1_Template, 2, 0, \"small\", 21);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.contactForm.controls[\"lastName\"].hasError(\"required\"));\n  }\n}\nexport class CreateContactComponent {\n  constructor(formBuilder, contactService) {\n    this.formBuilder = formBuilder;\n    this.contactService = contactService;\n    this.selectedContactId = 0;\n    this.isDeleteMode = false;\n    this.saveClick = new EventEmitter();\n    this.closeClick = new EventEmitter();\n    this.submitted = false; // New flag to track form submission\n    this.contactForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.pattern(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/)]],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required]\n    });\n  }\n  ngOnInit() {}\n  ngOnChanges(changes) {\n    // If selectedContactId changes, update the form and show the modal\n    if (changes['selectedContactId'] && this.contactModal && !this.isDeleteMode) {\n      if (this.selectedContactId > 0) {\n        // Load the contact for editing\n        this.contactService.getContactsById(this.selectedContactId).subscribe(contact => {\n          this.contactForm.patchValue({\n            email: contact.email,\n            firstName: contact.firstName,\n            lastName: contact.lastName\n          });\n          // Show the modal once the data is loaded\n          this.contactModal.show();\n        });\n      }\n    }\n  }\n  openModal() {\n    this.contactForm.reset();\n    this.contactModal.show();\n  }\n  closeModal() {\n    this.contactModal.hide();\n    this.resetForm(); // Reset form and submitted flag when closing the modal\n    this.closeClick.emit(true);\n  }\n  resetForm() {\n    this.contactForm.reset();\n    this.selectedContactId = 0;\n    this.isDeleteMode = false;\n    this.submitted = false; // Reset submitted so validation errors are hidden until next save attempt\n  }\n\n  saveContactForm() {\n    this.submitted = true; // Mark as submitted when saving the form\n    if (this.contactForm.invalid) {\n      ValidationHelper.validateAllFormFields(this.contactForm);\n      return;\n    } else {\n      let contactDto = new ContactDto();\n      contactDto = Object.assign({}, this.contactForm.value);\n      if (this.selectedContactId > 0) {\n        this.updateContact(contactDto);\n        contactDto.contactId = this.selectedContactId;\n      } else {\n        contactDto.contactId = 0;\n        this.createContact(contactDto);\n      }\n    }\n  }\n  createContact(data) {\n    this.contactService.createContact(data).subscribe(x => {\n      this.contactModal.hide();\n      this.saveClick.emit(true);\n      this.resetForm(); // Reset form and submitted flag after successful save\n    });\n  }\n\n  updateContact(data) {\n    this.contactService.UpdateContact(data).subscribe(x => {\n      this.contactModal.hide();\n      this.saveClick.emit(true);\n      this.resetForm(); // Reset form and submitted flag after successful save\n    });\n  }\n  static #_ = this.ɵfac = function CreateContactComponent_Factory(t) {\n    return new (t || CreateContactComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ContactService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateContactComponent,\n    selectors: [[\"app-create-contact\"]],\n    viewQuery: function CreateContactComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contactModal = _t.first);\n      }\n    },\n    inputs: {\n      selectedContactId: \"selectedContactId\",\n      isDeleteMode: \"isDeleteMode\"\n    },\n    outputs: {\n      saveClick: \"saveClick\",\n      closeClick: \"closeClick\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 35,\n    vars: 6,\n    consts: [[\"bsModal\", \"\", \"id\", \"contactModal\", \"tabindex\", \"-1\", \"role\", \"dialog\", \"aria-labelledby\", \"contactModal\", \"aria-hidden\", \"true\", 1, \"modal\"], [\"contactModal\", \"bs-modal\"], [1, \"modal-dialog\", \"modal-lg\"], [1, \"modal-content\"], [1, \"modal-header\"], [1, \"modal-title\"], [1, \"modal-body\"], [3, \"formGroup\"], [1, \"form-group\"], [\"for\", \"email\"], [2, \"color\", \"red\"], [\"type\", \"email\", \"id\", \"emailId\", \"placeholder\", \"Enter email\", \"formControlName\", \"email\", 1, \"form-control\", 3, \"required\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"for\", \"firstName\"], [\"type\", \"text\", \"id\", \"firstNameId\", \"placeholder\", \"Enter First Name\", \"formControlName\", \"firstName\", 1, \"form-control\", 3, \"required\"], [\"for\", \"lastName\"], [\"type\", \"text\", \"id\", \"lastNameId\", \"placeholder\", \"Enter Last Name\", \"formControlName\", \"lastName\", 1, \"form-control\"], [1, \"modal-footer\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", \"btn-sm\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", \"btn-sm\", 3, \"click\"], [1, \"text-danger\"], [4, \"ngIf\"]],\n    template: function CreateContactComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0, 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"h4\", 5);\n        i0.ɵɵtext(6, \"Modal Header\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"div\", 6)(8, \"form\", 7)(9, \"div\", 8)(10, \"label\", 9);\n        i0.ɵɵtext(11, \"Email address \");\n        i0.ɵɵelementStart(12, \"span\", 10);\n        i0.ɵɵtext(13, \"*\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(14, \"input\", 11);\n        i0.ɵɵtemplate(15, CreateContactComponent_div_15_Template, 3, 2, \"div\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"div\", 8)(17, \"label\", 13);\n        i0.ɵɵtext(18, \"First Name \");\n        i0.ɵɵelementStart(19, \"span\", 10);\n        i0.ɵɵtext(20, \"*\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(21, \"input\", 14);\n        i0.ɵɵtemplate(22, CreateContactComponent_div_22_Template, 2, 1, \"div\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"div\", 8)(24, \"label\", 15);\n        i0.ɵɵtext(25, \"Last Name \");\n        i0.ɵɵelementStart(26, \"span\", 10);\n        i0.ɵɵtext(27, \"*\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(28, \"input\", 16);\n        i0.ɵɵtemplate(29, CreateContactComponent_div_29_Template, 2, 1, \"div\", 12);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(30, \"div\", 17)(31, \"button\", 18);\n        i0.ɵɵlistener(\"click\", function CreateContactComponent_Template_button_click_31_listener() {\n          return ctx.saveContactForm();\n        });\n        i0.ɵɵtext(32, \" Save \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(33, \"button\", 19);\n        i0.ɵɵlistener(\"click\", function CreateContactComponent_Template_button_click_33_listener() {\n          return ctx.closeModal();\n        });\n        i0.ɵɵtext(34, \" Close \");\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"formGroup\", ctx.contactForm);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"required\", true);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.contactForm.controls[\"email\"].invalid && ctx.submitted);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"required\", true);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.contactForm.controls[\"firstName\"].invalid && ctx.submitted);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngIf\", ctx.contactForm.controls[\"lastName\"].invalid && ctx.submitted);\n      }\n    },\n    dependencies: [i3.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName, i4.ModalDirective],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["EventEmitter","Validators","ValidationHelper","ContactDto","i0","CreateContactComponent","constructor","formBuilder","contactService","contactForm","group","email","required","pattern","firstName","lastName","ngOnInit","ngOnChanges","changes","contactModal","isDeleteMode","selectedContactId","getContactsById","subscribe","contact","patchValue","show","openModal","reset","closeModal","hide","resetForm","closeClick","emit","submitted","saveContactForm","invalid","validateAllFormFields","contactDto","Object","assign","value","updateContact","contactId","createContact","data","x","saveClick","UpdateContact","selectors","viewQuery","ctx"],"sourceRoot":"","sources":["D:\\Project\\CMA\\ClientApp\\src\\app\\create-contact\\create-contact.component.ts","D:\\Project\\CMA\\ClientApp\\src\\app\\create-contact\\create-contact.component.html"],"sourcesContent":["import { AfterViewInit, Component, EventEmitter, Input, OnInit, Output, SimpleChanges, ViewChild } from '@angular/core';\nimport { ContactService } from '../Services/contact.service';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ModalDirective } from 'ngx-bootstrap/modal';\r\nimport { ValidationHelper } from '../Utility/validation-helper';\r\nimport { ContactDto } from '../Modal/ContactDto';\r\n\n@Component({\n  selector: 'app-create-contact',\n  templateUrl: './create-contact.component.html',\n  styleUrls: ['./create-contact.component.css']\n})\nexport class CreateContactComponent implements OnInit {\n  @Input() selectedContactId: number = 0;\n  @Input() isDeleteMode: boolean=false;\n  contactForm!: FormGroup;\n  @Output() saveClick = new EventEmitter();\r\n  @Output() closeClick = new EventEmitter();\n  @ViewChild('contactModal', { static: true }) contactModal!: ModalDirective;\n  submitted = false; // New flag to track form submission\n  constructor(private formBuilder: FormBuilder,\n    private readonly contactService: ContactService) {\n    this.contactForm = this.formBuilder.group({\n      email: [\n        '', \n        [\n          Validators.required,\n          Validators.pattern(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/)\n        ]\n      ],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n   \n  }\n  ngOnChanges(changes: SimpleChanges) {\n\n    // If selectedContactId changes, update the form and show the modal\n    if (changes['selectedContactId'] && this.contactModal && !this.isDeleteMode) {\n      if (this.selectedContactId > 0) {\n        // Load the contact for editing\n        this.contactService.getContactsById(this.selectedContactId).subscribe(contact => {\n          this.contactForm.patchValue({\n            email: contact.email,\n            firstName: contact.firstName,\n            lastName: contact.lastName,\n          });\n          // Show the modal once the data is loaded\n          this.contactModal.show();\n        });\n      }  \n    }\n  }\n \n  openModal() {\n    this.contactForm.reset();\n    this.contactModal.show();\n  }\n\n  closeModal() { \n    this.contactModal.hide();\n    this.resetForm(); // Reset form and submitted flag when closing the modal\n    this.closeClick.emit(true);\n  }\n  resetForm() {\n    this.contactForm.reset();\n    this.selectedContactId = 0;\n    this.isDeleteMode = false;\n    this.submitted = false; // Reset submitted so validation errors are hidden until next save attempt\n  }\n\n  saveContactForm() {\n    this.submitted = true; // Mark as submitted when saving the form\n    if (this.contactForm.invalid) {\n      ValidationHelper.validateAllFormFields(this.contactForm);\n      return;\n    }\n    else {\n      let contactDto: ContactDto = new ContactDto();\n      contactDto = Object.assign({}, this.contactForm.value);\n      if (this.selectedContactId > 0) {\n        this.updateContact(contactDto);\n        contactDto.contactId = this.selectedContactId;\r\n      }\n        \n      else {\n        contactDto.contactId = 0;\n        this.createContact(contactDto); \r\n      }\n        \n     \n    \n    }\n  }\n  createContact(data: ContactDto) {\n    this.contactService.createContact(data).subscribe(x => {\n      this.contactModal.hide();\n      this.saveClick.emit(true);\n      this.resetForm(); // Reset form and submitted flag after successful save\n    })\r\n  }\n\n  updateContact(data: ContactDto) {\n    this.contactService.UpdateContact(data).subscribe(x => {\n      this.contactModal.hide();\n      this.saveClick.emit(true);\n      this.resetForm(); // Reset form and submitted flag after successful save\n    })\r\n  }\n}\n","\r\n<div bsModal #contactModal=\"bs-modal\" class=\"modal\" id=\"contactModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"contactModal\" aria-hidden=\"true\">\r\n  <div class=\"modal-dialog modal-lg\">\r\n    <div class=\"modal-content\">\r\n       \r\n      <div class=\"modal-header\">\r\n        <!--<button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"closeModal()\">&times;</button>-->\r\n        <h4 class=\"modal-title\">Modal Header</h4>\r\n      </div>\r\n\r\n      <div class=\"modal-body\">\r\n\r\n        <form [formGroup]=\"contactForm\">\r\n          <div class=\"form-group\">\r\n            <label for=\"email\">Email address <span style=\"color:red\">*</span></label>\r\n            <input type=\"email\"\r\n                   class=\"form-control\"\r\n                   id=\"emailId\"\r\n                   placeholder=\"Enter email\"\r\n                   formControlName=\"email\"\r\n                   [required]=\"true\">\r\n            <div *ngIf=\"contactForm.controls['email'].invalid && submitted\" class=\"text-danger\">\r\n              <small *ngIf=\"contactForm.controls['email'].hasError('required')\">Email is required.</small>\r\n              <small *ngIf=\"contactForm.controls['email'].hasError('pattern')\">Please enter a valid email address.</small>\r\n            </div>\r\n\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"firstName\">First Name <span style=\"color:red\">*</span> </label>\r\n            <input type=\"text\"\r\n                   class=\"form-control\"\r\n                   id=\"firstNameId\"\r\n                   placeholder=\"Enter First Name\"\r\n                   formControlName=\"firstName\"\r\n                   [required]=\"true\">\r\n            <div *ngIf=\"contactForm.controls['firstName'].invalid && submitted\" class=\"text-danger\">\r\n              <small *ngIf=\"contactForm.controls['firstName'].hasError('required')\">First Name is required.</small> \r\n            </div>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"lastName\">Last Name <span style=\"color:red\">*</span> </label>\r\n            <input type=\"text\"\r\n                   class=\"form-control\"\r\n                   id=\"lastNameId\"\r\n                   placeholder=\"Enter Last Name\"\r\n                   formControlName=\"lastName\">\r\n            <div *ngIf=\"contactForm.controls['lastName'].invalid && submitted\" class=\"text-danger\">\r\n              <small *ngIf=\"contactForm.controls['lastName'].hasError('required')\">Last Name is required.</small>\r\n            </div>\r\n          </div>\r\n\r\n        </form>\r\n\r\n      </div>\r\n      <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-primary btn-sm\" (click)=\"saveContactForm()\">\r\n          Save\r\n        </button>\r\n        <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"closeModal()\">\r\n          Close\r\n        </button>\r\n\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}