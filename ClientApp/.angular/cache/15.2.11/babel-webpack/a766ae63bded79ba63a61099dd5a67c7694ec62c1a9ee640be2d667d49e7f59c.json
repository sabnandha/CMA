{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { ValidationHelper } from '../Utility/validation-helper';\nimport { ContactDto } from '../Modal/ContactDto';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../Services/contact.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"ngx-bootstrap/modal\";\nconst _c0 = [\"contactModal\"];\nfunction CreateContactComponent_div_15_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \"Email is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateContactComponent_div_15_small_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \"Please enter a valid email address.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateContactComponent_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 20);\n    i0.ɵɵtemplate(1, CreateContactComponent_div_15_small_1_Template, 2, 0, \"small\", 21);\n    i0.ɵɵtemplate(2, CreateContactComponent_div_15_small_2_Template, 2, 0, \"small\", 21);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.contactForm.controls[\"email\"].hasError(\"required\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.contactForm.controls[\"email\"].hasError(\"pattern\"));\n  }\n}\nfunction CreateContactComponent_div_22_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \"First Name is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateContactComponent_div_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 20);\n    i0.ɵɵtemplate(1, CreateContactComponent_div_22_small_1_Template, 2, 0, \"small\", 21);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.contactForm.controls[\"firstName\"].hasError(\"required\"));\n  }\n}\nfunction CreateContactComponent_div_29_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \"Last Name is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreateContactComponent_div_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 20);\n    i0.ɵɵtemplate(1, CreateContactComponent_div_29_small_1_Template, 2, 0, \"small\", 21);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.contactForm.controls[\"lastName\"].hasError(\"required\"));\n  }\n}\nexport let CreateContactComponent = /*#__PURE__*/(() => {\n  class CreateContactComponent {\n    constructor(formBuilder, contactService) {\n      this.formBuilder = formBuilder;\n      this.contactService = contactService;\n      this.selectedContactId = 0;\n      this.isDeleteMode = false;\n      this.saveClick = new EventEmitter();\n      this.closeClick = new EventEmitter();\n      this.submitted = false; // New flag to track form submission\n      this.contactForm = this.formBuilder.group({\n        contactId: [0],\n        email: ['', [Validators.required, Validators.pattern(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/)]],\n        firstName: ['', Validators.required],\n        lastName: ['', Validators.required]\n      });\n    }\n    ngOnInit() {}\n    ngOnChanges(changes) {\n      // If selectedContactId changes, update the form and show the modal\n      if (changes['selectedContactId'] && this.contactModal && !this.isDeleteMode) {\n        if (this.selectedContactId > 0) {\n          // Load the contact for editing\n          this.contactService.getContactsById(this.selectedContactId).subscribe(contact => {\n            this.contactForm.patchValue({\n              contactId: contact.contactId,\n              email: contact.email,\n              firstName: contact.firstName,\n              lastName: contact.lastName\n            });\n            // Show the modal once the data is loaded\n            this.contactModal.show();\n          });\n        }\n      }\n    }\n    openModal() {\n      this.contactForm.reset();\n      this.contactModal.show();\n    }\n    closeModal() {\n      this.contactModal.hide();\n      this.resetForm(); // Reset form and submitted flag when closing the modal\n      this.closeClick.emit(true);\n    }\n    resetForm() {\n      this.contactForm.reset();\n      this.selectedContactId = 0;\n      this.isDeleteMode = false;\n      this.submitted = false; // Reset submitted so validation errors are hidden until next save attempt\n    }\n\n    saveContactForm() {\n      this.submitted = true; // Mark as submitted when saving the form\n      if (this.contactForm.invalid) {\n        ValidationHelper.validateAllFormFields(this.contactForm);\n        return;\n      } else {\n        let contactDto = new ContactDto();\n        contactDto = Object.assign({}, this.contactForm.value);\n        if (contactDto.contactId > 0) {\n          this.updateContact(contactDto);\n        } else {\n          contactDto.contactId = 0;\n          this.createContact(contactDto);\n        }\n      }\n    }\n    createContact(data) {\n      this.contactService.createContact(data).subscribe(x => {\n        this.contactModal.hide();\n        this.saveClick.emit(true);\n        this.resetForm(); // Reset form and submitted flag after successful save\n      });\n    }\n\n    updateContact(data) {\n      this.contactService.UpdateContact(data).subscribe(x => {\n        this.contactModal.hide();\n        this.saveClick.emit(true);\n        this.resetForm(); // Reset form and submitted flag after successful save\n      });\n    }\n    static #_ = this.ɵfac = function CreateContactComponent_Factory(t) {\n      return new (t || CreateContactComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ContactService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: CreateContactComponent,\n      selectors: [[\"app-create-contact\"]],\n      viewQuery: function CreateContactComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 7);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contactModal = _t.first);\n        }\n      },\n      inputs: {\n        selectedContactId: \"selectedContactId\",\n        isDeleteMode: \"isDeleteMode\"\n      },\n      outputs: {\n        saveClick: \"saveClick\",\n        closeClick: \"closeClick\"\n      },\n      features: [i0.ɵɵNgOnChangesFeature],\n      decls: 35,\n      vars: 7,\n      consts: [[\"bsModal\", \"\", \"id\", \"contactModal\", \"tabindex\", \"-1\", \"role\", \"dialog\", \"aria-labelledby\", \"contactModal\", \"aria-hidden\", \"true\", 1, \"modal\"], [\"contactModal\", \"bs-modal\"], [1, \"modal-dialog\", \"modal-lg\"], [1, \"modal-content\"], [1, \"modal-header\"], [1, \"modal-title\"], [1, \"modal-body\"], [3, \"formGroup\"], [1, \"form-group\"], [\"for\", \"email\"], [2, \"color\", \"red\"], [\"type\", \"email\", \"id\", \"emailId\", \"placeholder\", \"Enter email\", \"formControlName\", \"email\", 1, \"form-control\", 3, \"required\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"for\", \"firstName\"], [\"type\", \"text\", \"id\", \"firstNameId\", \"placeholder\", \"Enter First Name\", \"formControlName\", \"firstName\", 1, \"form-control\", 3, \"required\"], [\"for\", \"lastName\"], [\"type\", \"text\", \"id\", \"lastNameId\", \"placeholder\", \"Enter Last Name\", \"formControlName\", \"lastName\", 1, \"form-control\"], [1, \"modal-footer\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", \"btn-sm\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", \"btn-sm\", 3, \"click\"], [1, \"text-danger\"], [4, \"ngIf\"]],\n      template: function CreateContactComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0, 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"h4\", 5);\n          i0.ɵɵtext(6);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(7, \"div\", 6)(8, \"form\", 7)(9, \"div\", 8)(10, \"label\", 9);\n          i0.ɵɵtext(11, \"Email address \");\n          i0.ɵɵelementStart(12, \"span\", 10);\n          i0.ɵɵtext(13, \"*\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(14, \"input\", 11);\n          i0.ɵɵtemplate(15, CreateContactComponent_div_15_Template, 3, 2, \"div\", 12);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(16, \"div\", 8)(17, \"label\", 13);\n          i0.ɵɵtext(18, \"First Name \");\n          i0.ɵɵelementStart(19, \"span\", 10);\n          i0.ɵɵtext(20, \"*\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(21, \"input\", 14);\n          i0.ɵɵtemplate(22, CreateContactComponent_div_22_Template, 2, 1, \"div\", 12);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(23, \"div\", 8)(24, \"label\", 15);\n          i0.ɵɵtext(25, \"Last Name \");\n          i0.ɵɵelementStart(26, \"span\", 10);\n          i0.ɵɵtext(27, \"*\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(28, \"input\", 16);\n          i0.ɵɵtemplate(29, CreateContactComponent_div_29_Template, 2, 1, \"div\", 12);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(30, \"div\", 17)(31, \"button\", 18);\n          i0.ɵɵlistener(\"click\", function CreateContactComponent_Template_button_click_31_listener() {\n            return ctx.saveContactForm();\n          });\n          i0.ɵɵtext(32, \" Save \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(33, \"button\", 19);\n          i0.ɵɵlistener(\"click\", function CreateContactComponent_Template_button_click_33_listener() {\n            return ctx.closeModal();\n          });\n          i0.ɵɵtext(34, \" Close \");\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(6);\n          i0.ɵɵtextInterpolate1(\"\", ctx.selectedContactId > 0 ? \"Update\" : \"Add\", \" Modal\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"formGroup\", ctx.contactForm);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"required\", true);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.contactForm.controls[\"email\"].invalid && ctx.submitted);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"required\", true);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.contactForm.controls[\"firstName\"].invalid && ctx.submitted);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngIf\", ctx.contactForm.controls[\"lastName\"].invalid && ctx.submitted);\n        }\n      },\n      dependencies: [i3.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName, i4.ModalDirective]\n    });\n  }\n  return CreateContactComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}