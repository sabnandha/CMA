{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { catchError, map, throwError as observableThrowError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ContactService = /*#__PURE__*/(() => {\n  class ContactService {\n    constructor(http, baseUrl) {\n      this.http = http;\n      this.baseUrl = baseUrl;\n    }\n    getContact() {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json' // Specify JSON content type\n      });\n\n      let getContactURL = this.baseUrl + \"weatherforecast/GetContacts\";\n      return this.http.get(getContactURL, {\n        headers\n      }).pipe(map(res => {\n        return res;\n      }), catchError(result => {\n        return this.handleError(result);\n      }));\n    }\n    getContactsById(contactId) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json' // Specify JSON content type\n      });\n\n      let getContactByIdUrl = this.baseUrl + \"weatherforecast/GetContactById?contactId=\" + contactId;\n      return this.http.get(getContactByIdUrl, {\n        headers\n      }).pipe(map(res => {\n        return res;\n      }), catchError(result => {\n        return this.handleError(result);\n      }));\n    }\n    createContact(model) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json' // Specify JSON content type\n      });\n\n      let createContactURL = this.baseUrl + \"weatherforecast/AddContact/\";\n      return this.http.post(createContactURL, JSON.stringify(model), {\n        headers\n      }).pipe(map(res => {\n        return res;\n      }), catchError(result => {\n        return this.handleError(result);\n      }));\n    }\n    UpdateContact(model) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json' // Specify JSON content type\n      });\n\n      let updateContactURL = this.baseUrl + \"weatherforecast/UpdateContact/\";\n      return this.http.post(updateContactURL, JSON.stringify(model), {\n        headers\n      }).pipe(map(res => {\n        return res;\n      }), catchError(result => {\n        return this.handleError(result);\n      }));\n    }\n    DeleteContact(contactId) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json' // Specify JSON content type\n      });\n\n      let deleteContactUrl = this.baseUrl + \"weatherforecast/DeleteContact?contactId=\" + contactId;\n      return this.http.delete(deleteContactUrl, {\n        headers\n      }).pipe(map(res => {\n        return res;\n      }), catchError(result => {\n        return this.handleError(result);\n      }));\n    }\n    handleError(result) {\n      if (result.status === 400 || result.status === 404) {\n        console.log(\"in 400\");\n        console.log(result);\n        return observableThrowError(result);\n      }\n      if (result.status === 500) {\n        console.log(\"in 500\");\n        console.log(result);\n        return observableThrowError(result);\n      }\n      if (result.status === 403) {\n        console.log(\"in 403\");\n        console.log(result);\n      }\n      if (result.status !== 401) {}\n      if (result.headers === undefined) {\n        return observableThrowError(result);\n      }\n      const applicationError = result.headers.get('Application-Error');\n      return observableThrowError(applicationError || 'Server error');\n    }\n    static #_ = this.ɵfac = function ContactService_Factory(t) {\n      return new (t || ContactService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ContactService,\n      factory: ContactService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ContactService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}