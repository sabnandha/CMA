{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { catchError, map, throwError as observableThrowError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ContactService {\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.baseUrl = baseUrl;\n  }\n  getContact() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json' // Specify JSON content type\n    });\n\n    let createContactURL = this.baseUrl + \"weatherforecast/GetContacts\";\n    return this.http.get(createContactURL, {\n      headers\n    }).pipe(map(res => {\n      return res;\n    }), catchError(result => {\n      return this.handleError(result);\n    }));\n  }\n  createContact(model) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json' // Specify JSON content type\n    });\n\n    let createContactURL = this.baseUrl + \"weatherforecast/AddContact/\";\n    return this.http.post(createContactURL, JSON.stringify(model), {\n      headers\n    }).pipe(map(res => {\n      return res;\n    }), catchError(result => {\n      return this.handleError(result);\n    }));\n  }\n  handleError(result) {\n    if (result.status === 400 || result.status === 404) {\n      console.log(\"in 400\");\n      console.log(result);\n      return observableThrowError(result);\n    }\n    if (result.status === 500) {\n      console.log(\"in 500\");\n      console.log(result);\n      return observableThrowError(result);\n    }\n    if (result.status === 403) {\n      console.log(\"in 403\");\n      console.log(result);\n    }\n    if (result.status !== 401) {}\n    if (result.headers === undefined) {\n      return observableThrowError(result);\n    }\n    const applicationError = result.headers.get('Application-Error');\n    return observableThrowError(applicationError || 'Server error');\n  }\n  static #_ = this.ɵfac = function ContactService_Factory(t) {\n    return new (t || ContactService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ContactService,\n    factory: ContactService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAAqBC,UAAU,EAAEC,GAAG,EAAEC,UAAU,IAAIC,oBAAoB,QAAQ,MAAM;;;AAMtF,OAAM,MAAOC,cAAc;EACzBC,YAAmBC,IAAgB,EAA6BC,OAAe;IAA5D,SAAI,GAAJD,IAAI;IAAyC,YAAO,GAAPC,OAAO;EAEvE;EACAC,UAAU;IACR,MAAMC,OAAO,GAAG,IAAIV,WAAW,CAAC;MAC9B,cAAc,EAAE,kBAAkB,CAAE;KACrC,CAAC;;IAEF,IAAIW,gBAAgB,GAAG,IAAI,CAACH,OAAO,GAAG,6BAA6B;IACnE,OAAO,IAAI,CAACD,IAAI,CAACK,GAAG,CAACD,gBAAgB,EAAE;MAAED;IAAO,CAAE,CAAC,CAChDG,IAAI,CACHX,GAAG,CAAEY,GAAO,IAAI;MAEd,OAAOA,GAAG;IACZ,CAAC,CAAC,EACFb,UAAU,CAACc,MAAM,IAAG;MAClB,OAAO,IAAI,CAACC,WAAW,CAACD,MAAM,CAAC;IACjC,CAAC,CAAC,CACH;EACL;EAEAE,aAAa,CAACC,KAAU;IACtB,MAAMR,OAAO,GAAG,IAAIV,WAAW,CAAC;MAC9B,cAAc,EAAE,kBAAkB,CAAE;KACrC,CAAC;;IAEF,IAAIW,gBAAgB,GAAG,IAAI,CAACH,OAAO,GAAE,6BAA6B;IAClE,OAAO,IAAI,CAACD,IAAI,CAACY,IAAI,CAACR,gBAAgB,EAAES,IAAI,CAACC,SAAS,CAACH,KAAK,CAAC,EAAE;MAAER;IAAO,CAAE,CAAC,CACxEG,IAAI,CACHX,GAAG,CAAEY,GAAG,IAAI;MAEV,OAAOA,GAAG;IACZ,CAAC,CAAC,EACFb,UAAU,CAACc,MAAM,IAAG;MAClB,OAAO,IAAI,CAACC,WAAW,CAACD,MAAM,CAAC;IACjC,CAAC,CAAC,CACH;EACL;EAEQC,WAAW,CAACD,MAAW;IAE7B,IAAIA,MAAM,CAACO,MAAM,KAAK,GAAG,IAAIP,MAAM,CAACO,MAAM,KAAK,GAAG,EAAE;MAClDC,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;MACrBD,OAAO,CAACC,GAAG,CAACT,MAAM,CAAC;MAEnB,OAAOX,oBAAoB,CAACW,MAAM,CAAC;;IAErC,IAAIA,MAAM,CAACO,MAAM,KAAK,GAAG,EAAE;MACzBC,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;MACrBD,OAAO,CAACC,GAAG,CAACT,MAAM,CAAC;MAEnB,OAAOX,oBAAoB,CAACW,MAAM,CAAC;;IAErC,IAAIA,MAAM,CAACO,MAAM,KAAK,GAAG,EAAE;MAEzBC,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;MACrBD,OAAO,CAACC,GAAG,CAACT,MAAM,CAAC;;IAGtB,IAAIA,MAAM,CAACO,MAAM,KAAK,GAAG,EAAE;IAK1B,IAAIP,MAAM,CAACL,OAAO,KAAKe,SAAS,EAAE;MAChC,OAAOrB,oBAAoB,CAACW,MAAM,CAAC;;IAGrC,MAAMW,gBAAgB,GAAGX,MAAM,CAACL,OAAO,CAACE,GAAG,CAAC,mBAAmB,CAAC;IAChE,OAAOR,oBAAoB,CAACsB,gBAAgB,IAAI,cAAc,CAAC;EACjE;EAAC;qBAvEUrB,cAAc,0CACoB,UAAU;EAAA;EAAA;WAD5CA,cAAc;IAAAsB,SAAdtB,cAAc;IAAAuB,YAFb;EAAM","names":["HttpHeaders","catchError","map","throwError","observableThrowError","ContactService","constructor","http","baseUrl","getContact","headers","createContactURL","get","pipe","res","result","handleError","createContact","model","post","JSON","stringify","status","console","log","undefined","applicationError","factory","providedIn"],"sourceRoot":"","sources":["D:\\Project\\CMA\\ClientApp\\src\\app\\Services\\contact.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from \"@angular/common/http\";\r\nimport { Inject, Injectable } from \"@angular/core\";\r\nimport { Observable, catchError, map, throwError as observableThrowError } from \"rxjs\";\r\nimport { ContactDto } from \"../Modal/ContactDto\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ContactService {\r\n  constructor(public http: HttpClient, @Inject('BASE_URL') public baseUrl: string) {\r\n   \r\n  }\r\n  getContact(): Observable<ContactDto[]> {\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json'  // Specify JSON content type\r\n    });\r\n\r\n    let createContactURL = this.baseUrl + \"weatherforecast/GetContacts\"\r\n    return this.http.get(createContactURL, { headers })\r\n      .pipe(\r\n        map((res:any) => {\r\n\r\n          return res;\r\n        }),\r\n        catchError(result => {\r\n          return this.handleError(result);\r\n        })\r\n      );\r\n  }\r\n\r\n  createContact(model: any) {\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json'  // Specify JSON content type\r\n    });\r\n\r\n    let createContactURL = this.baseUrl +\"weatherforecast/AddContact/\"\r\n    return this.http.post(createContactURL, JSON.stringify(model), { headers })\r\n      .pipe(\r\n        map((res) => {\r\n          \r\n          return res;\r\n        }),\r\n        catchError(result => {\r\n          return this.handleError(result);\r\n        })\r\n      );\r\n  }\r\n  \r\n  private handleError(result: any) {\r\n\r\n    if (result.status === 400 || result.status === 404) {\r\n      console.log(\"in 400\")\r\n      console.log(result);\r\n         \r\n      return observableThrowError(result);\r\n    }\r\n    if (result.status === 500) {\r\n      console.log(\"in 500\")\r\n      console.log(result);\r\n    \r\n      return observableThrowError(result);\r\n    }\r\n    if (result.status === 403) {\r\n\r\n      console.log(\"in 403\")\r\n      console.log(result);\r\n    }\r\n   \r\n   if (result.status !== 401) {\r\n      \r\n    }\r\n\r\n\r\n    if (result.headers === undefined) {\r\n      return observableThrowError(result);\r\n    }\r\n\r\n    const applicationError = result.headers.get('Application-Error');\r\n    return observableThrowError(applicationError || 'Server error');\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}