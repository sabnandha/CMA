{"ast":null,"code":"import { UntypedFormControl, UntypedFormGroup } from '@angular/forms';\nexport class ValidationHelper {\n  static zeroValueValidator(control) {\n    const zeroValue = control.value === null || control.value === undefined || control.value === '0' || control.value === 0 || (control.value.toString() || '').trim().length === 0;\n    return !zeroValue ? null : {\n      zeroValue: true\n    };\n  }\n  static createFormArray(dataList, formBuilder) {\n    if (dataList != null) {\n      const formGroupList = dataList.map(item => formBuilder.group(item));\n      return formBuilder.array(formGroupList);\n    } else {\n      return formBuilder.array([]);\n    }\n  }\n  static validateAllFormFields(formGroup) {\n    Object.keys(formGroup.controls).forEach(field => {\n      const control = formGroup.get(field);\n      if (control instanceof UntypedFormControl) {\n        control.markAsTouched({\n          onlySelf: true\n        });\n      } else if (control instanceof UntypedFormGroup) {\n        this.validateAllFormFields(control);\n      }\n    });\n  }\n  static applyTabHighLight(tabName, isValid) {\n    let tabLink = document.getElementById(tabName + '-link');\n    let tabBody = document.getElementById(tabName);\n    let tabChildBody = document.getElementById(tabName + '-Child');\n    if (tabBody != null) {\n      isValid ? tabBody.classList.remove(\"errorTab\") : tabBody.classList.add(\"errorTab\");\n    }\n    if (tabChildBody != null) {\n      isValid ? tabChildBody.classList.remove(\"errorTab\") : tabChildBody.classList.add(\"errorTab\");\n    }\n    if (tabLink != null) {\n      isValid ? tabLink.classList.remove(\"errorTab\") : tabLink.classList.add(\"errorTab\");\n    }\n  }\n  static getFormValueByFormControl(formControl, controlName) {\n    return formControl.get([controlName]).value;\n  }\n  static setFormControlError(formControl, controlName) {\n    formControl.get([controlName]).setErrors({\n      'required': true\n    });\n    formControl.get([controlName]).markAllAsTouched();\n  }\n  static clearFormControlError(formControl, controlName) {\n    formControl.get([controlName]).setErrors(null);\n  }\n  constructor() {}\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}